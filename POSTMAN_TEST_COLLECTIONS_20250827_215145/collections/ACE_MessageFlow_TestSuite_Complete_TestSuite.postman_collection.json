{
  "info": {
    "name": "ACE_MessageFlow_TestSuite - Complete Test Suite",
    "description": "Comprehensive testing collection for IBM ACE Message Flows\n\nGenerated on: 2025-08-27 21:51:46\nTotal Scenarios: 48\n\nThis collection covers:\n- Functional testing scenarios\n- Error handling and validation\n- Performance and load testing\n- Integration testing\n- Security testing",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Functional Tests",
      "item": [
        {
          "name": "Functional - Happy Path Processing - Valid business entity processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_001",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_001</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Happy Path Processing - Valid business entity processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_001');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Happy Path Processing - Valid business entity processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_001');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Happy Path Processing - Standard transformation scenarios",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_002",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_002</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Happy Path Processing - Standard transformation scenarios",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_002');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Happy Path Processing - Standard transformation scenarios",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_002');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Happy Path Processing - Database enrichment success paths",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_003",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_003</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Happy Path Processing - Database enrichment success paths",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_003');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Happy Path Processing - Database enrichment success paths",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_003');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Happy Path Processing - Normal routing and delivery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_004",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_004</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Happy Path Processing - Normal routing and delivery",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_004');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Happy Path Processing - Normal routing and delivery",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_004');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Business Entity Variations - SHP (Shipment) entity processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_005",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_005</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Business Entity Variations - SHP (Shipment) entity processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_005');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Business Entity Variations - SHP (Shipment) entity processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_005');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Business Entity Variations - QBK (Booking) entity processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_006",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_006</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Business Entity Variations - QBK (Booking) entity processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_006');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Business Entity Variations - QBK (Booking) entity processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_006');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Business Entity Variations - BRK (Brokerage) entity processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_007",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_007</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Business Entity Variations - BRK (Brokerage) entity processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_007');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Business Entity Variations - BRK (Brokerage) entity processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_007');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Functional - Business Entity Variations - Document type variations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_008",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_008</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Functional - Business Entity Variations - Document type variations",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_008');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Functional - Business Entity Variations - Document type variations",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_008');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Validation - Schema and Data Validation - XML schema validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_009",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_009</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Schema and Data Validation - XML schema validation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_009');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Schema and Data Validation - XML schema validation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_009');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Schema and Data Validation - Required field validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_010",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_010</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Schema and Data Validation - Required field validation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_010');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Schema and Data Validation - Required field validation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_010');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Schema and Data Validation - Data type validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_011",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_011</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Schema and Data Validation - Data type validation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_011');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Schema and Data Validation - Data type validation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_011');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Schema and Data Validation - Business rule validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_012",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_012</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Schema and Data Validation - Business rule validation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_012');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Schema and Data Validation - Business rule validation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_012');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Boundary Value Testing - Maximum length field testing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_013",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_013</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Boundary Value Testing - Maximum length field testing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_013');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Boundary Value Testing - Maximum length field testing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_013');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Boundary Value Testing - Minimum value testing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_014",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_014</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Boundary Value Testing - Minimum value testing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_014');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Boundary Value Testing - Minimum value testing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_014');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Boundary Value Testing - Special character handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_015",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_015</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Boundary Value Testing - Special character handling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_015');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Boundary Value Testing - Special character handling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_015');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation - Boundary Value Testing - Unicode and encoding tests",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_016",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_016</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Validation - Boundary Value Testing - Unicode and encoding tests",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_016');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Validation - Boundary Value Testing - Unicode and encoding tests",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_016');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Error Handling - Invalid Data Scenarios - Malformed XML messages",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_017",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_017</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - Invalid Data Scenarios - Malformed XML messages",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_017');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - Invalid Data Scenarios - Malformed XML messages",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_017');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - Invalid Data Scenarios - Missing required fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_018",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_018</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - Invalid Data Scenarios - Missing required fields",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_018');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - Invalid Data Scenarios - Missing required fields",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_018');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - Invalid Data Scenarios - Invalid data types",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_019",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>INVALID_DATA_TEST</MessageID>\n        <Timestamp>INVALID_DATE_FORMAT</Timestamp>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>INVALID_CODE_TOO_LONG_FOR_VALIDATION_RULES_THAT_SHOULD_CAUSE_ERROR</Code>\n        </DocumentType>\n        <EntityReference>\n            <Type>INVALID_ENTITY_TYPE</Type>\n            <EntityID>123</EntityID>\n        </EntityReference>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - Invalid Data Scenarios - Invalid data types",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_019');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - Invalid Data Scenarios - Invalid data types",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_019');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - Invalid Data Scenarios - Business rule violations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_020",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_020</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - Invalid Data Scenarios - Business rule violations",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_020');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - Invalid Data Scenarios - Business rule violations",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_020');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - System Error Scenarios - Database connection failures",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_021",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_021</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - System Error Scenarios - Database connection failures",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_021');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - System Error Scenarios - Database connection failures",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_021');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - System Error Scenarios - External service timeouts",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_022",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_022</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - System Error Scenarios - External service timeouts",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_022');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - System Error Scenarios - External service timeouts",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_022');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - System Error Scenarios - Queue unavailability",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_023",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_023</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - System Error Scenarios - Queue unavailability",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_023');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - System Error Scenarios - Queue unavailability",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_023');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error Handling - System Error Scenarios - Transformation failures",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_024",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_024</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Error Handling - System Error Scenarios - Transformation failures",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_024');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Error Handling - System Error Scenarios - Transformation failures",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_024');",
                  "pm.globals.set('test_priority', 1);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Performance - Load Testing - Single message processing time",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_025",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_025</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Load Testing - Single message processing time",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_025');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Load Testing - Single message processing time",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_025');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Load Testing - Concurrent message processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_026",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_026</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Load Testing - Concurrent message processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_026');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Load Testing - Concurrent message processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_026');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Load Testing - Large message handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_027",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>LARGE_PAYLOAD_TEST_TEST_027</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>LARGE_TEST</Code>\n            <Name>Large Payload Performance Test</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>LARGE_TEST_ENTITY</EntityID>\n        </EntityReference>\n        <LargeDataSection>\n            <DataBlockataBlock_0>\n            <DataBlockataBlock_1>\n            <DataBlockataBlock_2>\n            <DataBlockataBlock_3>\n            <DataBlockataBlock_4>\n            <DataBlockataBlock_5>\n            <DataBlock_6>LARGE_DATA_BLOCK_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX_6</DataBlock_6>\n            <DataBlockataBlock_7>\n            <DataBlockataBlock_8>\n            <DataBlockataBlock_9>\n        </LargeDataSection>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Load Testing - Large message handling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_027');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Load Testing - Large message handling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_027');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Load Testing - Sustained load testing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_028",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_028</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Load Testing - Sustained load testing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_028');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Load Testing - Sustained load testing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_028');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Volume Testing - Large XML message processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_029",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>LARGE_PAYLOAD_TEST_TEST_029</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>LARGE_TEST</Code>\n            <Name>Large Payload Performance Test</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>LARGE_TEST_ENTITY</EntityID>\n        </EntityReference>\n        <LargeDataSection>\n            <DataBlockataBlock_0>\n            <DataBlockataBlock_1>\n            <DataBlockataBlock_2>\n            <DataBlockataBlock_3>\n            <DataBlockataBlock_4>\n            <DataBlockataBlock_5>\n            <DataBlockataBlock_6>\n            <DataBlock_7>LARGE_DATA_BLOCK_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX_7</DataBlock_7>\n            <DataBlock_8>LARGE_DATA_BLOCK_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX_8</DataBlock_8>\n            <DataBlockataBlock_9>\n        </LargeDataSection>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Volume Testing - Large XML message processing",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_029');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Volume Testing - Large XML message processing",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_029');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Volume Testing - Bulk data transformation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_030",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_030</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Volume Testing - Bulk data transformation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_030');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Volume Testing - Bulk data transformation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_030');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Volume Testing - High-volume database lookups",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_031",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_031</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Volume Testing - High-volume database lookups",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_031');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Volume Testing - High-volume database lookups",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_031');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance - Volume Testing - Memory usage optimization",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_032",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_032</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Performance - Volume Testing - Memory usage optimization",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_032');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Performance - Volume Testing - Memory usage optimization",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_032');",
                  "pm.globals.set('test_priority', 3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Integration - Database Connectivity - Database lookup operations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_033",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_033</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - Database Connectivity - Database lookup operations",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_033');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - Database Connectivity - Database lookup operations",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_033');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - Database Connectivity - Data enrichment flows",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_034",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_034</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - Database Connectivity - Data enrichment flows",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_034');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - Database Connectivity - Data enrichment flows",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_034');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - Database Connectivity - Transaction management",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_035",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_035</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - Database Connectivity - Transaction management",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_035');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - Database Connectivity - Transaction management",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_035');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - Database Connectivity - Connection pooling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_036",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_036</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - Database Connectivity - Connection pooling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_036');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - Database Connectivity - Connection pooling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_036');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - External Service Calls - HTTP/REST service calls",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_037",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_037</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - External Service Calls - HTTP/REST service calls",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_037');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - External Service Calls - HTTP/REST service calls",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_037');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - External Service Calls - SOAP service integration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_038",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_038</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - External Service Calls - SOAP service integration",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_038');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - External Service Calls - SOAP service integration",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_038');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - External Service Calls - Authentication handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_039",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_039</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - External Service Calls - Authentication handling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_039');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - External Service Calls - Authentication handling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_039');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Integration - External Service Calls - Service timeout handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_040",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_040</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Integration - External Service Calls - Service timeout handling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_040');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Integration - External Service Calls - Service timeout handling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_040');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "Security - Authentication Testing - Valid authentication tokens",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_041",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_041</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Authentication Testing - Valid authentication tokens",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_041');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Authentication Testing - Valid authentication tokens",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_041');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Authentication Testing - Invalid/expired tokens",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_042",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>INVALID_DATA_TEST</MessageID>\n        <Timestamp>INVALID_DATE_FORMAT</Timestamp>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>INVALID_CODE_TOO_LONG_FOR_VALIDATION_RULES_THAT_SHOULD_CAUSE_ERROR</Code>\n        </DocumentType>\n        <EntityReference>\n            <Type>INVALID_ENTITY_TYPE</Type>\n            <EntityID>123</EntityID>\n        </EntityReference>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Authentication Testing - Invalid/expired tokens",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_042');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Authentication Testing - Invalid/expired tokens",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_042');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Authentication Testing - Authorization levels",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_043",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_043</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Authentication Testing - Authorization levels",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_043');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Authentication Testing - Authorization levels",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_043');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Authentication Testing - Security header validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_044",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_044</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Authentication Testing - Security header validation",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Authentication is properly validated', function () {",
                  "    if (pm.response.code === 401) {",
                  "        pm.expect(pm.response.text()).to.include('unauthorized');",
                  "    }",
                  "});",
                  "// Validation rule: authorization_validation",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_044');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Authentication Testing - Security header validation",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_044');",
                  "pm.globals.set('test_priority', 2);",
                  "",
                  "// Security test setup",
                  "pm.globals.set('auth_test_mode', 'enabled');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Data Security Testing - Sensitive data handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_045",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_045</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Data Security Testing - Sensitive data handling",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_045');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Data Security Testing - Sensitive data handling",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_045');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Data Security Testing - Data encryption/decryption",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_046",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_046</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Data Security Testing - Data encryption/decryption",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_046');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Data Security Testing - Data encryption/decryption",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_046');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Data Security Testing - SQL injection prevention",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_047",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_047</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Data Security Testing - SQL injection prevention",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_047');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Data Security Testing - SQL injection prevention",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_047');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Security - Data Security Testing - Cross-site scripting prevention",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/xml",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "X-Test-Scenario",
                "value": "TEST_048",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_048</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/default",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test script for: Security - Data Security Testing - Cross-site scripting prevention",
                  "pm.test('Response status code is valid', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid content', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "// Validation rule: response_time_check",
                  "// Validation rule: status_code_validation",
                  "",
                  "pm.test('Response has valid XML structure', function () {",
                  "    try {",
                  "        const responseXml = xml2Json(pm.response.text());",
                  "        pm.expect(responseXml).to.not.be.null;",
                  "    } catch (e) {",
                  "        pm.expect.fail('Invalid XML response');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains business data', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('DocumentMessage');",
                  "});",
                  "",
                  "// Log test results",
                  "console.log('Test Scenario: TEST_048');",
                  "console.log('Response Status: ' + pm.response.code);",
                  "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Pre-request script for: Security - Data Security Testing - Cross-site scripting prevention",
                  "",
                  "// Generate dynamic test data",
                  "pm.globals.set('randomUUID', function() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0,",
                  "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "});",
                  "",
                  "pm.globals.set('randomInt', function(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "});",
                  "",
                  "// Set test scenario context",
                  "pm.globals.set('current_test_scenario', 'TEST_048');",
                  "pm.globals.set('test_priority', 2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{env_base_url}}",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "{{env_auth_token}}",
      "type": "string"
    },
    {
      "key": "mq_simulator_url",
      "value": "{{env_mq_simulator_url}}",
      "type": "string"
    },
    {
      "key": "test_run_id",
      "value": "TEST_RUN_20250827_215145",
      "type": "string"
    },
    {
      "key": "project_name",
      "value": "ACE_MessageFlow_TestSuite",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  }
}
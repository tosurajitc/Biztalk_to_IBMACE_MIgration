{
  "info": {
    "name": "ACE_MessageFlow_TestSuite - Security Tests",
    "description": "Security Tests scenarios for IBM ACE Message Flows\n\nGenerated on: 2025-08-27 21:51:46\nScenarios: 8",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Security - Authentication Testing - Valid authentication tokens",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_041",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_041</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Authentication Testing - Valid authentication tokens",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_041');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Authentication Testing - Valid authentication tokens",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_041');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Authentication Testing - Invalid/expired tokens",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_042",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>INVALID_DATA_TEST</MessageID>\n        <Timestamp>INVALID_DATE_FORMAT</Timestamp>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>INVALID_CODE_TOO_LONG_FOR_VALIDATION_RULES_THAT_SHOULD_CAUSE_ERROR</Code>\n        </DocumentType>\n        <EntityReference>\n            <Type>INVALID_ENTITY_TYPE</Type>\n            <EntityID>123</EntityID>\n        </EntityReference>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Authentication Testing - Invalid/expired tokens",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_042');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Authentication Testing - Invalid/expired tokens",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_042');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Authentication Testing - Authorization levels",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_043",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_043</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Authentication Testing - Authorization levels",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_043');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Authentication Testing - Authorization levels",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_043');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Authentication Testing - Security header validation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_044",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_044</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Authentication Testing - Security header validation",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Authentication is properly validated', function () {",
              "    if (pm.response.code === 401) {",
              "        pm.expect(pm.response.text()).to.include('unauthorized');",
              "    }",
              "});",
              "// Validation rule: authorization_validation",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_044');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Authentication Testing - Security header validation",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_044');",
              "pm.globals.set('test_priority', 2);",
              "",
              "// Security test setup",
              "pm.globals.set('auth_test_mode', 'enabled');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Data Security Testing - Sensitive data handling",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_045",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_045</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Data Security Testing - Sensitive data handling",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_045');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Data Security Testing - Sensitive data handling",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_045');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Data Security Testing - Data encryption/decryption",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_046",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_046</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Data Security Testing - Data encryption/decryption",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_046');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Data Security Testing - Data encryption/decryption",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_046');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Data Security Testing - SQL injection prevention",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_047",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_047</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Data Security Testing - SQL injection prevention",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_047');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Data Security Testing - SQL injection prevention",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_047');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Security - Data Security Testing - Cross-site scripting prevention",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "type": "text"
          },
          {
            "key": "X-Test-Scenario",
            "value": "TEST_048",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DocumentMessage>\n    <Header>\n        <MessageID>{{randomUUID()}}</MessageID>\n        <Timestamp>2025-08-27T21:51:46</Timestamp>\n        <Source>\n            <SystemName>POSTMAN_TEST</SystemName>\n            <Version>1.0</Version>\n        </Source>\n        <Target>\n            <SystemName>IBM_ACE</SystemName>\n            <CountryCode>US</CountryCode>\n        </Target>\n    </Header>\n    <Document>\n        <DocumentType>\n            <Code>TEST_SHP</Code>\n            <Name>Test Document for SHP</Name>\n        </DocumentType>\n        <EntityReference>\n            <Type>SHP</Type>\n            <EntityID>TEST_SHP_{{randomInt(1000, 9999)}}</EntityID>\n            <Reference Type=\"SSN\">SSN{{randomInt(100000, 999999)}}</Reference>\n            <Reference Type=\"HouseBill\">HB{{randomInt(10000, 99999)}}</Reference>\n        </EntityReference>\n        <BusinessData>\n            <CompanyCode>TEST_COMPANY</CompanyCode>\n            <ProcessingDate>2025-08-27T21:51:46</ProcessingDate>\n            <Priority>NORMAL</Priority>\n            <TestScenario>TEST_048</TestScenario>\n        </BusinessData>\n    </Document>\n</DocumentMessage>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/default",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "default"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test script for: Security - Data Security Testing - Cross-site scripting prevention",
              "pm.test('Response status code is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response has valid content', function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});",
              "// Validation rule: response_time_check",
              "// Validation rule: status_code_validation",
              "",
              "pm.test('Response has valid XML structure', function () {",
              "    try {",
              "        const responseXml = xml2Json(pm.response.text());",
              "        pm.expect(responseXml).to.not.be.null;",
              "    } catch (e) {",
              "        pm.expect.fail('Invalid XML response');",
              "    }",
              "});",
              "",
              "pm.test('Response contains business data', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('DocumentMessage');",
              "});",
              "",
              "// Log test results",
              "console.log('Test Scenario: TEST_048');",
              "console.log('Response Status: ' + pm.response.code);",
              "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script for: Security - Data Security Testing - Cross-site scripting prevention",
              "",
              "// Generate dynamic test data",
              "pm.globals.set('randomUUID', function() {",
              "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
              "        var r = Math.random() * 16 | 0,",
              "            v = c == 'x' ? r : (r & 0x3 | 0x8);",
              "        return v.toString(16);",
              "    });",
              "});",
              "",
              "pm.globals.set('randomInt', function(min, max) {",
              "    return Math.floor(Math.random() * (max - min + 1)) + min;",
              "});",
              "",
              "// Set test scenario context",
              "pm.globals.set('current_test_scenario', 'TEST_048');",
              "pm.globals.set('test_priority', 2);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{env_base_url}}",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "{{env_auth_token}}",
      "type": "string"
    },
    {
      "key": "mq_simulator_url",
      "value": "{{env_mq_simulator_url}}",
      "type": "string"
    },
    {
      "key": "test_run_id",
      "value": "TEST_RUN_20250827_215145",
      "type": "string"
    },
    {
      "key": "project_name",
      "value": "ACE_MessageFlow_TestSuite",
      "type": "string"
    }
  ]
}